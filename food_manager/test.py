from flask.cli import with_appcontext
from db_operations import *
from models import *
import click

# the following is generated by AI to test the constraint check.
@click.command('test-constraints')
@with_appcontext
def test_constraints():
    """Test database constraint checks by adding invalid data."""
    try:
        click.echo("Testing constraint violations...")

        # Attempt to insert a negative prep time (should fail)
        invalid_recipe = Recipe(
            food_id=1,  # Assuming a valid Food ID exists
            instruction="Test constraint violation",
            prep_time=-5,  # Invalid negative time
            cook_time=10,
            servings=2
        )
        db.session.add(invalid_recipe)
        db.session.commit()  # This should trigger the CheckConstraint

    except Exception as e:
        db.session.rollback()
        click.echo(f"Constraint violation caught: {str(e)}")

    try:
        # Attempt to insert negative calories (should fail)
        invalid_nutrition = NutritionalInfo(
            recipe_id=1,  # Assuming a valid Recipe ID exists
            calories=-100,  # Invalid negative value
            protein=10,
            carbs=30,
            fat=5
        )
        db.session.add(invalid_nutrition)
        db.session.commit()  # This should trigger the CheckConstraint

    except Exception as e:
        db.session.rollback()
        click.echo(f"Constraint violation caught: {str(e)}")

    click.echo("Constraint tests completed.")


# the following is generated by AI to test the ondelete behavior.
@click.command('test-ondelete')
@with_appcontext
def test_ondelete():
    """Test ON DELETE CASCADE functionality."""
    try:
        click.echo("Testing ON DELETE CASCADE...")

        # Delete a Food item and check if related recipes are deleted
        food_to_delete = Food.query.first()
        if food_to_delete:
            click.echo(f"Deleting Food: {food_to_delete.name}")
            db.session.delete(food_to_delete)
            db.session.commit()

            # Check if related recipes still exist
            remaining_recipes = Recipe.query.filter_by(food_id=food_to_delete.food_id).count()
            if remaining_recipes == 0:
                click.echo("✅ ON DELETE CASCADE working for Food -> Recipes")
            else:
                click.echo("❌ ON DELETE CASCADE FAILED for Food -> Recipes")

        # Delete a Recipe and check if related data is removed
        recipe_to_delete = Recipe.query.first()
        if recipe_to_delete:
            click.echo(f"Deleting Recipe: {recipe_to_delete.recipe_id}")
            db.session.delete(recipe_to_delete)
            db.session.commit()

            # Check if related nutritional info exists
            remaining_nutrition = NutritionalInfo.query.filter_by(recipe_id=recipe_to_delete.recipe_id).count()
            if remaining_nutrition == 0:
                click.echo("✅ ON DELETE CASCADE working for Recipe -> Nutritional Info")
            else:
                click.echo("❌ ON DELETE CASCADE FAILED for Recipe -> Nutritional Info")

    except Exception as e:
        db.session.rollback()
        click.echo(f"Error testing ON DELETE: {str(e)}")

    click.echo("ON DELETE CASCADE tests completed.")

